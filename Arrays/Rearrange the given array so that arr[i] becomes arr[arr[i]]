Given an array arr[] of size N where every element is in range from 0 to n-1. Rearrange the given array so that arr[i] becomes arr[arr[i]]. This should be done with O(1) extra space.

Example:
Input:
3
2
1 0
5
4 0 2 1 3
4
3 2 0 1

Output:
0 1
3 4 2 0 1
1 0 3 2

Explanation:
Testcase 1: arr[0] = 1 and arr[arr[0]] = 0. Also, arr[1] = 0 and arr[arr[1]] = 1. So, rearranging elements, we get array as, 0 1.

class Rearrange  
{ 
    // The function to rearrange an array in-place so that arr[i] 
    // becomes arr[arr[i]]. 
    void rearrange(int arr[], int n)  
    { 
        // First step: Increase all values by (arr[arr[i]]%n)*n 
        for (int i = 0; i < n; i++) 
            arr[i] += (arr[arr[i]] % n) * n; 
  
        // Second Step: Divide all values by n 
        for (int i = 0; i < n; i++) 
            arr[i] /= n; 
    } 
  
    // A utility function to print an array of size n 
    void printArr(int arr[], int n)  
    { 
        for (int i = 0; i < n; i++) 
            System.out.print(arr[i] + " "); 
        System.out.println(""); 
    } 
  
    /* Driver program to test above functions */
    public static void main(String[] args)  
    { 
        Rearrange rearrange = new Rearrange(); 
        int arr[] = {3, 2, 0, 1}; 
        int n = arr.length; 
  
        System.out.println("Given Array is :"); 
        rearrange.printArr(arr, n); 
  
        rearrange.rearrange(arr, n); 
  
        System.out.println("Modified Array is :"); 
        rearrange.printArr(arr, n); 
    } 
} 
