//Gray to Binary equivalent
Given N in Gray code equivalent. Find its binary equivalent.

Input:
The first line contains an integer T, number of test cases. For each test cases, there is an integer N denoting the number in gray equivalent.

Output:
For each test case, in a new line, the output is the decimal equivalent number N of binary form.

Constraints:
1 <= T <= 100
0 <= n <= 108

Example:
Input
2
4
15
Output
7
10

Explanation:
Testcase1. 4 is represented as 100 and its binary equivalent is 111 whose decimal equivalent is 7.
Testcase2. 15 is represented as 1111 and its binary equivalent is 1010 i.e. 10 in decimal.



/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) throws NumberFormatException, IOException{
		//code
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
        int t = Integer.parseInt(br.readLine()); 
    while (t-- > 0) { 
        // n : size of array 
    	int n=Integer.parseInt(br.readLine());
    	String r=Integer.toBinaryString(n);
    	char[] c=r.toCharArray();
    	String s=""+c[0];
    	int[] sc=new int[c.length];
    	sc[0]=c[0];
    	for(int i=1;i<c.length;i++) {
    		s=s+Integer.parseInt(""+(c[i]^sc[i-1]));
    		sc[i]=s.charAt(i);
    	}
    	
    	System.out.println(Integer.parseInt(s, 2));
    	
        }}
}
