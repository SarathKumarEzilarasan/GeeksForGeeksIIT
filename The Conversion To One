You are given a number N. You need to convert it to 1 in minimum number of operations.

The operations allowed are as follows:

If N is even then divide the number by 2.
If N is odd then you can either add 1 to it or subtract 1 from it.
Using the above operations, find the minimum number of operations require to convert N to 1.

Input:
The first line of input contains T denoting the number of testcases. T testcases follow. Each testcase contains 1 line of input containing N.

Output:
For each testcase, in a new line, print the minimum number of steps required.

Constraints:
1 <= T <= 100
1 <= N <= 107

Examples:
Input:
4
1
2
3
4
Output:
0
1
2
2


/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main(String[] args) throws NumberFormatException, IOException {
		// code
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		while (t-- > 0) {
			String n = br.readLine();
			Integer x = Integer.parseInt(n);
			System.out.println(ope(0, x.intValue()));
		}
	}

	public static int ope(int n, int num) {
		if (num == 1) {
			return n;
		}
		if (num % 2 == 0) {
			return ope(n + 1, num / 2);

		} else {
			int count1 = 0;
			int count2 = 0;
			count1 = ope(n + 1, num - 1);
			count2 = ope(n + 1, num + 1);
			if (count1 > count2)
				return count2;
			else
				return count1;
		}
	}
}
