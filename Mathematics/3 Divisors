Given a value N. The task is to find how many numbers less than or equal to N have numbers of divisors exactly equal to 3.

Input:
The first line contains integer T, denoting number of test cases. Then T test cases follow. The only line of each test case contains an integer N.

Output :
For each testcase, in a new line, print the answer of each test case.

Constraints :
1 <= T <= 105
1 <= N <= 109

Example:
Input :
3
6
10
30

Output :
1
2
3

Explanation:
Testcase 1: There is only one number 4 which has exactly three divisors 1, 2 and 4.


/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) throws NumberFormatException, IOException{
		//code
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
        int t = Integer.parseInt(br.readLine()); 
    while (t-- > 0) { 
        // n : size of array 
    	int n=Integer.parseInt(br.readLine());
    	Set<Long> a=new TreeSet<>();
    	boolean[] arr=new boolean[n+1];
    	for(int i=2;i<=n;i++) {
    		arr[i]= false;
    	}
    	for(int i=2;i<=n;i++) {
    			for(int j=i*i;j<=n;j+=i) {
    				if(arr[j]==false) {
    					arr[j]=true;
    				}
    			}
    		}
    	int count=0;
    	for(int i=2;i<=n;i++) {
    		if(arr[i]==false && i*i<=n)
    			count+=1;
    	}
    	System.out.println(count);
    		
    }
	}
}
