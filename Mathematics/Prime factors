Given a number N. The task is to print all its unique prime factors in increasing order.

Input:
The first line of input contains an integer T denoting the number of test cases. T testcases follow.
The first line of each test case is N.

Output:
For each testcase, in a new line, print all prime factors in increasing order separated by space.

Constraints:
1 ≤ T ≤ 10000
2 ≤ N ≤ 106

Example:
Input:
2
100
35

Output:
2 5
5 7

Explanation:
Testcase1: 2 and 5 are the only prime factors of 100.










import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
public static void main (String[] args) throws NumberFormatException, IOException{
		//code
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
        int t = Integer.parseInt(br.readLine()); 
    while (t-- > 0) { 
        // n : size of array 
    	int n=Integer.parseInt(br.readLine());
    	Set<Integer> a=new TreeSet<>();
    	int[] arr=new int[n+1];
    	
    	arr[1]=1;
    	for(int i=2;i<=n;i++) {
    		if(arr[i]==0) {
    			arr[i]=i;
    			
    			for(int j=i*i;j<=n;j+=i) {
    				if(arr[j]==0) {
    					arr[j]=i;
    				}
    			}
    		}
    	}
    	
    	while (n != 1) 
        { 
            a.add(arr[n]); 
            n= n / arr[n]; 
        } 
    	System.out.println(a);
    	
    }
	}
}
