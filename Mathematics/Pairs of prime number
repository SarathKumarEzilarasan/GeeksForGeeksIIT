//Pairs of prime number
Print all pairs (sets) of prime numbers (p,q) such that p*q <= n, where n is given number.

Input:
The first line of input contains an integer T denoting the number of test cases. T testcases follow.
The first line of each test case is N.

Output:
For each testcase, in a new line, print the all pairs of prime numbers in increasing order.

Constraints:
1 ≤ T ≤ 50
4 ≤ N ≤ 400

Example:
Input:
2
4
8
Output:
2 2
2 2 2 3 3 2

Explanation:
Testcase 1: Pair (2, 2) which has both prime numbers as well as satisfying the condition 2*2 <= 4.

/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) throws NumberFormatException, IOException{
		//code
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
        int t = Integer.parseInt(br.readLine()); 
    while (t-- > 0) { 
        // n : size of array 
    	int n=Integer.parseInt(br.readLine());
        ArrayList<Integer> a=new ArrayList<>();
     //////////////////////////////////////////////Sieve of Eratosthenes
       boolean[] arr=new boolean[n+1];
       for(int i=0;i<=n;i++) {
    	   arr[i]=true;
       }
        
       for(int i=2;i*i<=n;i++) {
    	   if(arr[i]==true) {
    		   for(int j=i*i;j<=n;j+=i) {
    			   arr[j]=false;
    		   }
    		   
    	   }
       }
       for(int i=2;i<=n;i++) {
    	   if(arr[i]==true)
    		   a.add(i);
       }
       
    /////////////////////////   
       for(int i=0;i<a.size();i++) {
    	   for(int j=0;j<a.size();j++) {
    		   if(a.get(i)*a.get(j)<=n) {
    			   System.out.print(a.get(i)+" "+a.get(j)+" ");
    		   }
    	   }
       }
       System.out.println();
    }
	}
}
